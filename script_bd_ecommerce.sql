-- Criação de banco de dados para o cenário Ecommerce
create database ecommerce; 

use ecommerce; 

-- criar tabela cliente 

CREATE TABLE CLIENTE (
  CLI_ID INT NOT NULL AUTO_INCREMENT,
  CLI_PNOME VARCHAR(10) NOT NULL,
  CLI_MNOME VARCHAR(3) NULL,
  CLI_SOBRENOME VARCHAR(10) NOT NULL,
  CLI_CPFCNPJ VARCHAR(14) NOT NULL,
  CLI_ENDERECO VARCHAR(200) NULL,
  CLI_DATA_NASCIMENTO DATE NULL,
  PRIMARY KEY (CLI_ID),
  UNIQUE INDEX CLI_CPFCNPJ_UNIQUE (CLI_CPFCNPJ ASC));
  
  -- criar tabela fornecedor 
  
  CREATE TABLE FORNECEDOR (
  FOR_ID INT NOT NULL AUTO_INCREMENT,
  FOR_RAZAO_SOCIAL VARCHAR(100) NOT NULL,
  FOR_CPFCNPJ VARCHAR(14) NOT NULL,
  PRIMARY KEY (FOR_ID),
  UNIQUE INDEX CPFCNPJ_UNIQUE (FOR_CPFCNPJ ASC));
  
  -- criar tabela produto 

  CREATE TABLE IF NOT EXISTS PRODUTO (
  PRO_ID INT NOT NULL AUTO_INCREMENT,
  PRO_DESCRICAO VARCHAR(100) NOT NULL,
  PRO_CATEGORIA VARCHAR(50) NULL,
  PRO_VALOR DECIMAL(18,2) NULL,
  PRIMARY KEY (PRO_ID));
  
  -- criar tabela fornecedor x produto 
  
  CREATE TABLE IF NOT EXISTS FORNECEDOR_PRODUTO (
  FOP_FOR_ID INT NOT NULL,
  FOP_PRO_ID INT NOT NULL,
  FOP_QUANTIDADE DECIMAL(18,2) NOT NULL,
  PRIMARY KEY (FOP_FOR_ID, FOP_PRO_ID),
  INDEX fk_FORNECEDOR_PRODUTO_FORNECEDOR_idx (FOP_PRO_ID ASC),
  INDEX fk_FORNECEDOR_PRODUTO_PRODUTO_idx (FOP_FOR_ID ASC),
  CONSTRAINT fk_FORNECEDOR_PRODUTO_FORNECEDOR
    FOREIGN KEY (FOP_FOR_ID)
    REFERENCES FORNECEDOR (FOR_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_FORNECEDOR_PRODUTO_PRODUTO
    FOREIGN KEY (FOP_PRO_ID)
    REFERENCES PRODUTO (PRO_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
  
  -- criar tabela estoque 
  
  CREATE TABLE ESTOQUE (
  EST_ID INT NOT NULL AUTO_INCREMENT,
  EST_LOCAL VARCHAR(100) NOT NULL,
  PRIMARY KEY (EST_ID),
  UNIQUE INDEX LOCAL_UNIQUE (EST_LOCAL ASC));
  
  -- criar tabela estoque_produto 
  
  CREATE TABLE ESTOQUE_PRODUTO (
  ESP_EST_ID INT NOT NULL,
  ESP_PRO_ID INT NOT NULL,
  ESP_QUANTIDADE DECIMAL(18,2) NOT NULL,
  PRIMARY KEY (ESP_EST_ID, ESP_PRO_ID),
  INDEX fk_ESTOQUE_PRODUTO_ESTOQUE_idx (ESP_PRO_ID ASC) VISIBLE,
  INDEX fk_ESTOQUE_PRODUTO_PRODUTO_idx (ESP_EST_ID ASC) VISIBLE,
  CONSTRAINT fk_ESTOQUE_PRODUTO_ESTOQUE
    FOREIGN KEY (ESP_EST_ID)
    REFERENCES ESTOQUE (EST_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_ESTOQUE_PRODUTO_PRODUTO
    FOREIGN KEY (ESP_PRO_ID)
    REFERENCES PRODUTO (PRO_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- criar tabela terceiro 

CREATE TABLE TERCEIRO (
  TER_ID INT NOT NULL AUTO_INCREMENT,
  TER_RAZAO_SOCIAL VARCHAR(100) NULL,
  TER_LOCAL VARCHAR(50) NULL,
  TER_CPFCNPJ VARCHAR(14) NOT NULL,
  PRIMARY KEY (TER_ID),
  UNIQUE INDEX TER_CPFCNPJ_UNIQUE (TER_CPFCNPJ ASC) VISIBLE);    
    
-- criar tabela venda 

CREATE TABLE IF NOT EXISTS VENDA (
  VEN_PRO_ID INT NOT NULL,
  VEN_TER_ID INT NOT NULL,
  VEN_QUANTIDADE DECIMAL(18,2) NOT NULL,
  PRIMARY KEY (VEN_PRO_ID, VEN_TER_ID),
  INDEX fk_VENDA_PRODUTO_idx (VEN_TER_ID ASC) VISIBLE,
  INDEX fk_VENDA_TERCEIRO_idx (VEN_PRO_ID ASC) VISIBLE,
  CONSTRAINT fk_VENDA_PRODUTO
    FOREIGN KEY (VEN_PRO_ID)
    REFERENCES PRODUTO (PRO_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_VENDA_TERCEIRO
    FOREIGN KEY (VEN_TER_ID)
    REFERENCES TERCEIRO (TER_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
    
-- criar tabela pedido 

CREATE TABLE IF NOT EXISTS PEDIDO (
  PED_ID INT NOT NULL AUTO_INCREMENT,
  PED_CLI_ID INT NOT NULL,
  PED_FRETE DECIMAL(18,2) NULL,
  PED_DESCRICAO VARCHAR(100) NULL,
  PED_STATUS ENUM('Em andamento', 'Processando', 'Enviado', 'Entrege') NOT NULL DEFAULT 'Em andamento',
  PRIMARY KEY (PED_ID, PED_CLI_ID),
  INDEX fk_PEDIDO_CLIENTE_idx (PED_CLI_ID ASC) VISIBLE,
  CONSTRAINT fk_PEDIDO_CLIENTE
    FOREIGN KEY (PED_CLI_ID)
    REFERENCES CLIENTE (CLI_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

    
-- criar tabela produto pedido 

CREATE TABLE IF NOT EXISTS PRODUTO_PEDIDO (
  PRP_PED_ID INT NOT NULL,
  PRP_PRO_ID INT NOT NULL,
  PRP_QUANTIDADE DECIMAL(18,2) NOT NULL,
  PRIMARY KEY (PRP_PED_ID, PRP_PRO_ID),
  INDEX fk_PRODUTO_PEDIDO_PEDIDO_idx (PRP_PRO_ID ASC) VISIBLE,
  INDEX fk_PRODUTO_PEDIDO_PRODUTO_idx (PRP_PED_ID ASC) VISIBLE,
  CONSTRAINT fk_PRODUTO_PEDIDO_PEDIDO
    FOREIGN KEY (PRP_PED_ID)
    REFERENCES PEDIDO (PED_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_PRODUTO_PEDIDO_PRODUTO
    FOREIGN KEY (PRP_PRO_ID)
    REFERENCES PRODUTO (PRO_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- criar tabela devolução pedido 

CREATE table DEVOLUCAO_PEDIDO (
  DEP_PED_ID INT NOT NULL,
  DEP_CLI_ID INT NOT NULL,
  DEP_DATA DATE NOT NULL,
  PRIMARY KEY (DEP_PED_ID, DEP_CLI_ID),
  INDEX fk_DEVOLUCAO_PEDIDO_PEDIDO_idx (DEP_CLI_ID ASC) VISIBLE,
  INDEX fk_DEVOLUCAO_PEDIDO_CLIENTE_idx (DEP_PED_ID ASC) VISIBLE,
  CONSTRAINT fk_DEVOLUCAO_PEDIDO_PEDIDO
    FOREIGN KEY (DEP_PED_ID)
    REFERENCES PEDIDO (PED_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_DEVOLUCAO_PEDIDO_CLIENTE
    FOREIGN KEY (DEP_CLI_ID)
    REFERENCES CLIENTE (CLI_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
    
-- criar tabela entrega 

CREATE TABLE ENTREGA (
  ENT_ID INT NOT NULL AUTO_INCREMENT,
  ENT_PED_ID INT NOT NULL,
  ENT_STATUS VARCHAR(50) NOT NULL,
  ENT_ENDERECO VARCHAR(200) NULL,
  PRIMARY KEY (ENT_ID, ENT_PED_ID),
  INDEX fk_ENTREGA_PEDIDO_idx (ENT_PED_ID ASC) VISIBLE,
  UNIQUE INDEX ENT_PED_ID_UNIQUE (ENT_PED_ID ASC) VISIBLE,
  CONSTRAINT fk_ENTREGA_PEDIDO
    FOREIGN KEY (ENT_PED_ID)
    REFERENCES PEDIDO (PED_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
    
-- criar tabela forma pagamento 

CREATE TABLE FORMA_PAGAMENTO (
  FOP_ID INT NOT NULL AUTO_INCREMENT,
  FOP_DESCRICAO VARCHAR(50) NOT NULL,
  PRIMARY KEY (FOP_ID),
  UNIQUE INDEX FOP_DESCRICAO_UNIQUE (FOP_DESCRICAO ASC) VISIBLE);
  
-- criar tabela pagamento 

CREATE TABLE PAGAMENTO (
  PAG_ID INT NOT NULL AUTO_INCREMENT,
  PAG_PED_ID INT NOT NULL,
  PAG_FOP_ID INT NOT NULL,
  PAG_VALOR DECIMAL(18,2) NOT NULL,
  PRIMARY KEY (PAG_ID, PAG_PED_ID, PAG_FOP_ID),
  INDEX fk_PAGAMENTO_PEDIDO_idx (PAG_PED_ID ASC) VISIBLE,
  INDEX fk_PAGAMENTO_FORMA_PAGAMENTO_idx (PAG_FOP_ID ASC) VISIBLE,
  CONSTRAINT fk_PAGAMENTO_PEDIDO
    FOREIGN KEY (PAG_PED_ID)
    REFERENCES PEDIDO (PED_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_PAGAMENTO_FORMA_PAGAMENTO
    FOREIGN KEY (PAG_FOP_ID)
    REFERENCES FORMA_PAGAMENTO (FOP_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);